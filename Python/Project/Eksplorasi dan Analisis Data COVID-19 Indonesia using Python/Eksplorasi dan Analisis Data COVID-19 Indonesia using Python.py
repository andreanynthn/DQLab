# -*- coding: utf-8 -*-
"""Eksplorasi dan Analisis Data COVID-19 Indonesia using Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dgI68n_GqHUHsEGMvw_hwIFTMwuxPe3X

# Eksplorasi dan Analisis Data COVID-19 Indonesia using Python
Nama: Andrean Yonathan | Email: and21yonathan@gmail.com | Telp/WA: +6289606707966 | linkedin.com/in/andreanynthn/

### Latar Belakang

COVID-19 merupakan penyakit yang saat ini telah menjadi pandemi secara global. Kondisi menjadi semakin mengkhawatirkan karena hingga detik ini masih belum ditemukan vaksin yang efektif untuk virus penyebab COVID-19. Pemerintah di berbagai negara umumnya dengan sigap membentuk gugus tugas (task force unit) untuk menangani penyebaran COVID-19 di masyarakat, termasuk pemerintah di Indonesia.<br>

Salah satu bentuk aksi yang dilakukan oleh pemerintah adalah dengan mengumpulkan dan menyediakan data pertumbuhan kasus COVID-19 kepada publik. Data pertumbuhan kasus tersebut tidak jarang juga dilengkapi dengan dasbor dan grafik visualisasi pendukung dengan harapan masyarakat dapat memahami informasi dengan lebih mudah. Sebagai contoh adalah portal covid19.go.id besutan Gugus Tugas Penanganan COVID-19 Nasional dan portal PIKOBAR milik pemerintah Provinsi Jawa Barat. Serta banyak portal data COVID-19 lainnya yang disediakan oleh masing-masing pemerintah daerah. Data yang dipergunakan merupakan data real time yang diambil langsung dari API (Application Programming Interface) yang tersedia di covid19.go.id

<i><b>Note: Data dalam project ini merupakan data real time sehingga hasilnya akan terus berubah seiring bertambahnya data</i>

### Import Library
"""

import requests
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

"""### Mengakses API covid19.go.id"""

resp = requests.get('https://data.covid19.go.id/public/api/update.json', verify=False)
print(resp)

"""<i>Response [200] yang menandakan permintaan telah dipenuhi</i>

### Mengetahui Headers resp
"""

print(resp.headers)

"""### Mengekstrak Isi Respon

Jalankan method `json()` pada obyek resp dan simpanlah hasilnya sebagai `cov_id_raw`.<br>
Dengan menggunakan fungsi `len()` dan method `keys()` cobalah amati ada berapa komponen serta apa saja nama komponen dalam obyek `cov_id_raw` tersebut! Kemudian ekstraklah key ke-2 dan simpan dengan nama `cov_id_update`.
"""

cov_id_raw = resp.json()
cov_id_raw

print('Length of cov_id_raw : %d.' %len(cov_id_raw))
print('Komponen cov_id_raw  : %s.' %cov_id_raw.keys())

cov_id_update = cov_id_raw['update']

"""### Analisis Data

Sekarang Anda diminta untuk fokus pada obyek `cov_id_update` untuk menjawab pertanyaan-pertanyaan berikut:

1. Kapan tanggal pembaharuan data penambahan kasus?
2. Berapa jumlah penambahan kasus sembuh?
3. Berapa jumlah penambahan kasus meninggal?
4. Berapa jumlah total kasus positif hingga saat ini?
5. Berapa jumlah total kasus meninggal hingga saat ini?
"""

# Kapan tanggal pembaharuan data penambahan kasus?
print('Tanggal pembaharuan data penambahan kasus   :', cov_id_update['penambahan']['tanggal'])

# Berapa jumlah penambahan kasus sembuh?
print('Jumlah penambahan kasus sembuh   :', cov_id_update['penambahan']['jumlah_sembuh'])

# Berapa jumlah penambahan kasus meninggal?
print('Jumlah penambahan kasus meninggal   :', cov_id_update['penambahan']['jumlah_meninggal'])

# Berapa jumlah total kasus positif hingga saat ini?
print('Jumlah total kasus positif hingga saat ini   :', cov_id_update['total']['jumlah_positif'])

# Berapa jumlah total kasus meninggal hingga saat ini?
print('Jumlah total kasus meninggal hingga saat ini   :', cov_id_update['total']['jumlah_meninggal'])

"""### Apa Kabar Jawa Barat?"""

# mengakses dan mengekstrak API
resp_jabar = requests.get('https://data.covid19.go.id/public/api/prov_detail_JAWA_BARAT.json',
                          verify=False)
cov_jabar_raw = resp_jabar.json()
resp_jabar



"""### Memahami Kasus Covid-19 di Jawa Barat
Sekarang jalankanlah method `keys()` pada `cov_jabar_raw` tersebut untuk mengetahui nama-nama elemen utama yang tersedia dan jawablah pertanyaan berikut:

1. Kapan tanggal pembaharuan data?
2. Berapa jumlah total kasus COVID-19 di Jawa Barat?
3. Berapa persentase kematian akibat COVID-19 di Jawa Barat?
4. Berapa persentase tingkat kesembuhan dari COVID-19 di Jawa Barat?
"""

# nama-nama elemen utama
print('Nama-nama elemen utama:\n', cov_jabar_raw.keys())

# tanggal pembaharuan data
print('\nTanggal pembaharuan data COVID-19 di Jawa Barat           : %s' %cov_jabar_raw['last_date'])

# jumlah total kasus positif di Jawa Barat
print('Jumlah total kasus COVID-19 di Jawa Barat                 : %d' %cov_jabar_raw['kasus_total'])

# persentase kematian akibat covid-19 di Jawa Barat
print('Persentase kematian akibat COVID-19 di Jawa Barat         : %f.2%%' %cov_jabar_raw['meninggal_persen'])

# persentase tingkat kesembuhan covid-19 di Jawa Barat
print('Persentase tingkat kesembuhan dari COVID-19 di Jawa Barat : %f.2%%' %cov_jabar_raw['sembuh_persen'])

"""### Memperoleh Informasi yang Lebih Lengkap
Data historis perkembangan COVID-19 tersimpan dengan nama `list_perkembangan`. Silakan Anda ekstrak data tersebut dari `cov_jabar_raw` dan untuk lebih memudahkan dalam menginspeksi data ubahlah data bertipe dict ke pandas dataframe. Kemudian simpanlah hasilnya sebagai obyek bernama `cov_jabar!` Amati struktur `cov_jabar` menggunakan method `info()` dan `head()`.
"""

cov_jabar = pd.DataFrame(cov_jabar_raw['list_perkembangan'])
print('Info cov_jabar:\n', cov_jabar.info())
print('\nLima data teratas cov_jabar:\n', cov_jabar.head())

"""### Menjinakan Data

Ada beberapa tahapan yang akan Anda lakukan untuk menjinakan data `cov_jabar`, yaitu:

1. Menghapus kolom `DIRAWAT_OR_ISOLASI` dan semua kolom yang berisi nilai kumulatif
2. Merubah format penulisan semua kolom menjadi huruf kecil
3. Mengganti nama kolom `kasus` menjadi `kasus_baru`
4. Memperbaiki tipe data pada kolom `tanggal` menggunakan `pd.to_datetime`
"""

cov_jabar_tidy = (cov_jabar.drop(columns=[item for item in cov_jabar.columns 
                                               if item.startswith('AKUMULASI') 
                                                  or item.startswith('DIRAWAT')])
                           .rename(columns=str.lower)
                           .rename(columns={'kasus': 'kasus_baru'})
                  )
cov_jabar_tidy['tanggal'] = pd.to_datetime(cov_jabar_tidy['tanggal']*1e6, unit='ns')
print('Lima data teratas:\n', cov_jabar_tidy.head())

"""### Menunjukkan Melalui Gambar
Membuat bar-chart jumlah kasus baru harian COVID-19 di Jawa Barat menggunakan data `cov_jabar_tidy`! Pergunakan kolom tanggal sebagai sumbu-x.
"""

plt.clf()
fig, ax = plt.subplots(figsize=(10,5))
ax.bar(data=cov_jabar_tidy, x='tanggal', height='kasus_baru')
plt.show()

"""### Informasi Pada Grafik"""

plt.clf()
fig, ax = plt.subplots(figsize=(10,5))
ax.bar(data=cov_jabar_tidy, x='tanggal', height='kasus_baru', color='salmon')
fig.suptitle('Kasus Harian Positif COVID-19 di Jawa Barat', 
             y=1.00, fontsize=16, fontweight='bold', ha='center')
ax.set_title('Terjadi pelonjakan kasus di awal bulan Juli 2021 akibat klaster Secapa AD Bandung',
             fontsize=10)
ax.set_xlabel('')
ax.set_ylabel('Jumlah Kasus')
ax.text(1, -0.4, 'Sumber data: covid19.go.id', color='#43B0F1',
        ha='right', transform=ax.transAxes)
ax.set_xticklabels(ax.get_xticks(), rotation=90)

ax.xaxis.set_major_locator(mdates.MonthLocator())
ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))

plt.grid(axis='y')
plt.tight_layout()
# plt.savefig('Kasus Harian Positif - Jawa Barat.png', format = 'png')
plt.show()

"""### Grafik untuk Kasus Sembuh"""

plt.clf()
fig, ax = plt.subplots(figsize=(10,5))
ax.bar(data=cov_jabar_tidy, x='tanggal', height='sembuh', color='olivedrab')
ax.set_title('Kasus Harian Sembuh Dari COVID-19 di Jawa Barat',
             fontsize=22)
ax.set_xlabel('')
ax.set_ylabel('Jumlah Kasus')
ax.text(1, -0.3, 'Sumber data: covid19.go.id', color='#43B0F1',
        ha='right', transform=ax.transAxes)
ax.set_xticklabels(ax.get_xticks(), rotation=90)

ax.xaxis.set_major_locator(mdates.MonthLocator())
ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))

plt.grid(axis='y')
plt.tight_layout()
# plt.savefig('Kasus Harian Sembuh - Jawa Barat.png', format = 'png')
plt.show()

"""### Grafik untuk Kasus Meninggal"""

plt.clf()
fig, ax = plt.subplots(figsize=(10,5))
ax.bar(data=cov_jabar_tidy, x='tanggal', height='meninggal', color='slategrey')
ax.set_title('kasus Harian Meninggal Dari Covid-19 di Jawa Barat',
             fontsize=22)
ax.set_xlabel('')
ax.set_ylabel('Jumlah Kasus')
ax.text(1, -0.3, 'Sumber data: covid19.go.id', color='#43B0F1',
        ha='right', transform=ax.transAxes)
ax.set_xticklabels(ax.get_xticks(), rotation=90)

ax.xaxis.set_major_locator(mdates.MonthLocator())
ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))

plt.grid(axis='y')
plt.tight_layout()
# plt.savefig('Kasus Harian Meninggal - Jawa Barat.png', format = 'png')
plt.show()

"""### Apakah Pekan Ini Lebih Baik?
Hitung pertambahan kasus pekanan dan simpanlah hasilnya sebagai `cov_jabar_pekanan`! Anda juga diminta untuk menggunakan method `info()` dan `.head()` untuk melakukan inspeksi data.
"""

cov_jabar_pekanan = (cov_jabar_tidy.set_index('tanggal')['kasus_baru']
                                   .resample('W')
                                   .sum()
                                   .reset_index()
                                   .rename(columns={'kasus_baru': 'jumlah'})
                    )
cov_jabar_pekanan['tahun'] = cov_jabar_pekanan['tanggal'].apply(lambda x: x.year)
cov_jabar_pekanan['pekan_ke'] =cov_jabar_pekanan['tanggal'].apply(lambda x: x.weekofyear)
cov_jabar_pekanan = cov_jabar_pekanan[['tahun', 'pekan_ke', 'jumlah']]

print('Info cov_jabar_pekanan:')
print(cov_jabar_pekanan.info())
print('\nLima data teratas cov_jabar_pekanan:\n', cov_jabar_pekanan.head())

"""### Apakah Pekan Ini Lebih Baik Dari Pekan Kemarin?
Demi menjawab hal tersebut Anda melakukan kalkulasi sederhana dengan tahapan berikut:

* Membuat kolom baru yang berisi jumlah kasus baru dalam satu pekan sebelumnya. Kolom ini diberi nama `jumlah_pekanlalu`.
* Mengganti nilai `NaN` pada kolom `jumlah_pekanlalu` dengan nilai 0
* Melakukan komparasi antara kolom `jumlah` dengan kolom `jumlah_pekanlalu`. Hasil komparasi ini disimpan dalam kolom baru dengan nama `lebih_baik`, isinya adalah `True` apabila jumlah kasus baru pekan ini lebih rendah dibandingkan jumlah kasus pekan lalu
"""

cov_jabar_pekanan['jumlah_pekanlalu'] = cov_jabar_pekanan['jumlah'].shift().replace(np.nan, 0).astype(np.int)
cov_jabar_pekanan['lebih_baik'] = cov_jabar_pekanan['jumlah'] < cov_jabar_pekanan['jumlah_pekanlalu']

print('Sepuluh data terbaru:\n', cov_jabar_pekanan.tail(10))

"""### Membuat Bar Chart"""

plt.clf()
jml_tahun_terjadi_covid19 = cov_jabar_pekanan['tahun'].nunique()
tahun_terjadi_covid19 = cov_jabar_pekanan['tahun'].unique()
fig, axes = plt.subplots(nrows=jml_tahun_terjadi_covid19,
                         figsize=(10,3*jml_tahun_terjadi_covid19))

fig.suptitle('Kasus Pekanan Positif COVID-19 di Jawa Barat',
             y=1.00, fontsize=16, fontweight='bold', ha='center')

for i, ax in enumerate(axes):
    ax.bar(data=cov_jabar_pekanan.loc[cov_jabar_pekanan['tahun']==tahun_terjadi_covid19[i]],
           x='pekan_ke', height='jumlah', color=['mediumseagreen' if x is True else 'salmon'
                                                 for x in cov_jabar_pekanan['lebih_baik']])
    
    if i == 0:
        ax.set_title('Kolom hijau menunjukkan penambahan kasus baru lebih sedikit dibandingkan satu pekan sebelumnya', fontsize=10)
        
    elif i == jml_tahun_terjadi_covid19-1:
        ax.text(1, -0.2, 'Sumber data: covid19.go.id', color='#43B0F1', ha='right', transform=ax.transAxes)
        ax.set_xlim([0, 52.5])
        ax.set_ylim([0, max(cov_jabar_pekanan['jumlah'])])
        ax.set_xlabel('')
        ax.set_ylabel('Jumlah Kasus %d' %(tahun_terjadi_covid19[i],))
        ax.grid(axis='y')
        
plt.tight_layout()
plt.savefig('Kasus Pekanan Positif - Jawa Barat.png', format = 'png')
plt.show()

"""### Hingga Saat Ini Ada Berapa Kasus yang Masih Aktif?
<i>note: aktif dalam artian sedang dalam perawatan atau isolasi</i><br>
Jumlah kasus aktif dapat dihitung dengan cara mengurangi jumlah akumulasi positif dengan jumlah akumulasi sembuh dan jumlah akumulasi meninggal.
"""

cov_jabar_akumulasi = cov_jabar_tidy[['tanggal']].copy()
cov_jabar_akumulasi['akumulasi_aktif'] = (cov_jabar_tidy['kasus_baru'] -
                                          cov_jabar_tidy['sembuh'] - cov_jabar_tidy['meninggal']).cumsum()
cov_jabar_akumulasi['akumulasi_sembuh'] = cov_jabar_tidy['sembuh'].cumsum()
cov_jabar_akumulasi['akumulasi_meninggal'] = cov_jabar_tidy['meninggal'].cumsum()
print(cov_jabar_akumulasi.tail())

"""### Membuat Line Chart Pola Kasus Aktif"""

plt.clf()
fig, ax = plt.subplots(figsize=(10,5))
ax.plot('tanggal', 'akumulasi_aktif', data=cov_jabar_akumulasi, lw=2)

ax.set_title('Akumulasi Aktif COVID-19 di Jawa Barat',
             fontsize=22)
ax.set_xlabel('')
ax.set_ylabel('Akumulasi Aktif')
ax.text(1, -0.3, 'Sumber data: covid19.go.id', color='#43B0F1',
        ha='right', transform=ax.transAxes)
ax.set_xticklabels(ax.get_xticks(), rotation=90)

ax.xaxis.set_major_locator(mdates.MonthLocator())
ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))

plt.grid()
plt.tight_layout()
# plt.savefig('Akumulasi Aktif - Jawa Barat.png', format = 'png')
plt.show()

"""### Tahap Akhir"""

plt.clf()
fig, ax = plt.subplots(figsize=(10,5))
cov_jabar_akumulasi_ts = cov_jabar_akumulasi.set_index('tanggal')
cov_jabar_akumulasi_ts.plot(kind='line', ax=ax, lw=3,
                            color=['salmon', 'slategrey', 'olivedrab'])

ax.set_title('Dinamika Kasus COVID-19 di Jawa Barat',
             fontsize=22)
ax.set_xlabel('')
ax.set_ylabel('Akumulasi aktif')
ax.text(1, -0.3, 'Sumber data: covid.19go.id', color='#43B0F1',
        ha='right', transform=ax.transAxes)

plt.grid()
plt.tight_layout()
# plt.savefig('Dinamika Kasus Covid-19 - Jawa Barat.png', format = 'png')
plt.show()